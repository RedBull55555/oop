# --- –ö–ª–∞—Å—Å—ã –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecture(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            lecturer.grades.setdefault(course, []).append(grade)
        else:
            return '–û—à–∏–±–∫–∞'

    def average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0

    def __str__(self):
        avg = self.average_grade()
        courses_in_progress = ', '.join(self.courses_in_progress)
        finished = ', '.join(self.finished_courses)
        return (f'–ò–º—è: {self.name}\n'
                f'–§–∞–º–∏–ª–∏—è: {self.surname}\n'
                f'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {avg:.1f}\n'
                f'–ö—É—Ä—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è: {courses_in_progress}\n'
                f'–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã: {finished}')

    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() < other.average_grade()

    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() == other.average_grade()


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

    def __str__(self):
        return f'–ò–º—è: {self.name}\n–§–∞–º–∏–ª–∏—è: {self.surname}'


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def average_grade(self):
        all_grades = [grade for grades in self.grades.values() for grade in grades]
        return sum(all_grades) / len(all_grades) if all_grades else 0

    def __str__(self):
        avg = self.average_grade()
        return (f'–ò–º—è: {self.name}\n'
                f'–§–∞–º–∏–ª–∏—è: {self.surname}\n'
                f'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –ª–µ–∫—Ü–∏–∏: {avg:.1f}')

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() < other.average_grade()

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() == other.average_grade()


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            student.grades.setdefault(course, []).append(grade)
        else:
            return '–û—à–∏–±–∫–∞'

    def __str__(self):
        return super().__str__()



student1 = Student('–û–ª—å–≥–∞', '–ê–ª—ë—Ö–∏–Ω–∞', '–ñ')
student1.courses_in_progress += ['Python', 'Git']
student1.finished_courses += ['–û—Å–Ω–æ–≤—ã']
student2 = Student('–ò–≤–∞–Ω', '–°–∞—Ñ–æ–Ω–æ–≤', '–ú')
student2.courses_in_progress += ['Python']

# üìö –õ–µ–∫—Ç–æ—Ä—ã
lecturer1 = Lecturer('–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤')
lecturer1.courses_attached += ['Python', 'Git']
lecturer2 = Lecturer('–ü–∞–≤–µ–ª', '–î–∞–Ω–∏–ª–æ–≤')
lecturer2.courses_attached += ['Python']

# ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–µ
reviewer1 = Reviewer('–ê–Ω–Ω–∞', '–°–∏–¥–æ—Ä–æ–≤–∞')
reviewer1.courses_attached += ['Python']
reviewer2 = Reviewer('–ï–ª–µ–Ω–∞', '–û—Ä–ª–æ–≤–∞')
reviewer2.courses_attached += ['Python', 'Git']

# üìù –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
reviewer1.rate_hw(student1, 'Python', 9)
reviewer1.rate_hw(student1, 'Git', 10)
reviewer2.rate_hw(student2, 'Python', 6)
reviewer2.rate_hw(student2, 'Python', 7)

# üé§ –°—Ç—É–¥–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∏–≤–∞—é—Ç –ª–µ–∫—Ç–æ—Ä–æ–≤
student1.rate_lecture(lecturer1, 'Python', 10)
student1.rate_lecture(lecturer1, 'Git', 9)
student2.rate_lecture(lecturer2, 'Python', 8)



print(student1)
print()
print(student2)
print()
print(lecturer1)
print()
print(lecturer2)
print()
print(reviewer1)
print()
print(reviewer2)
